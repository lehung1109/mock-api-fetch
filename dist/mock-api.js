var a=Object.defineProperty;var l=(e,o,t)=>o in e?a(e,o,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[o]=t;var c=(e,o,t)=>(l(e,typeof o!="symbol"?o+"":o,t),t);class h{constructor(){c(this,"events");this.events={}}addEventListener(o){const{url:t,callback:n}=o,s=new URL(t,window.location.origin);this.events[s.href]=n}dispatch(o){const{url:t,req:n}=o,s=this.events[t.href];return typeof s=="function"?s.call(this,n):{status:404,body:{error:"NOT FOUND"}}}}const i=new h;function f(e,o){if(typeof e=="string"&&(e=new URL(e,window.location.origin)),e instanceof Request)return console.log(`${e.url}: you're using origin fetch`),window.originFetch(e,o);const t=i.dispatch({url:e,req:o});if(t.status&&t.status===404)return console.log(`${e.href}: The api is not exists in mock, fallback to origin fetch`),window.originFetch(e,o);console.log(`${e.href}: you're using mock fetch`);const n=200+Math.random()*(2e3-200);return new Promise(r=>setTimeout(r,n)).then(()=>new Response(JSON.stringify(t.body),{status:t.status}))}function w(e){i.addEventListener(e)}window.originFetch=window.fetch;window.fetch=f;window.mock=w;
